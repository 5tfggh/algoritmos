import random

class AntColonyOptimizer:

    def __init__(self, n_ants, n_iterations, alpha, beta, rho):
        self.n_ants = n_ants
        self.n_iterations = n_iterations
        self.alpha = alpha 
        self.beta = beta
        self.rho = rho
        self.pheromone_matrix = []
        self.distance_matrix = []
        
    def solve(self, cities):
        self.initialize_matrices(cities)
        for _ in range(self.n_iterations):
            solutions = self.construct_solutions()
            self.update_pheromones(solutions)
        best_solution = min(solutions, key=lambda x:x[1])
        return best_solution[0]

    def initialize_matrices(self, cities):
        self.pheromone_matrix = [[1 for _ in range(len(cities))] for _ in range(len(cities))]
        self.distance_matrix = [[0 for _ in range(len(cities))] for _ in range(len(cities))]
        for i in range(len(cities)):
            for j in range(len(cities)):
                self.distance_matrix[i][j] = self.distance(cities[i], cities[j])

    def construct_solutions(self):
        solutions = []
        for _ in range(self.n_ants):  
            path = self.a_single_ant()
            solutions.append((path, self.path_distance(path)))
        return solutions
    
    def a_single_ant(self):
        path = []
        visited = [False for _ in range(len(self.distance_matrix))] 
        current = random.randint(0, len(self.distance_matrix)-1)
        path.append(current)
        visited[current] = True
        
        while False in visited:
            next = self.pick_next(current, path, visited)
            path.append(next)
            visited[next] = True
            current = next
        
        return path

    def pick_next(self, current, path, visited):
        probabilities = []
        for i in range(len(self.distance_matrix)):
            if not visited[i]:
                try:
                    heuristic = 1 / self.distance_matrix[current][i] 
                except ZeroDivisionError:
                    heuristic = 1
                pheromone = self.pheromone_matrix[current][i]
                probability = pheromone ** self.alpha * heuristic ** self.beta
                probabilities.append(probability)
        
        total = sum(probabilities)
        probabilities = [p / total for p in probabilities] 
        next = random.choices(range(len(probabilities)), weights=probabilities)[0]
        
        return next

    def path_distance(self, path):
        distance = 0
        for i in range(len(path)-1):
            distance += self.distance_matrix[path[i]][path[i+1]]
        return distance
    
    def update_pheromones(self, solutions):
        for i in range(len(self.pheromone_matrix)):
            for j in range(len(self.pheromone_matrix)):
                self.pheromone_matrix[i][j] *= self.rho
                
        for solution in solutions:
            for i in range(len(solution[0])-1):
                self.pheromone_matrix[solution[0][i]][solution[0][i+1]] += 1 / solution[1]

def distance(city1, city2):
    x1, y1 = city1
    x2, y2 = city2
    return ((x1-x2)**2 + (y1-y2)**2)**0.5  

cities = [(1, 0), (3, 2), (4, 2), (5, 3), (6, 4), (7, 4), (8, 5), (9, 6), (10, 7)]

aco = AntColonyOptimizer(25, 100, 1, 2, 0.5)
path = aco.solve(cities)

print(path)